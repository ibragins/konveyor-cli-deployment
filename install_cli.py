#!/usr/bin/python
import argparse
import json

import config
from config import set_config
from local_deployment import run_local_deployment
from remote_deployment import run_remote_deployment

CONFIG_FILE = "config.json"

def load_config():
    """Loads config from JSON-file."""
    with open(CONFIG_FILE, "r") as f:
        configuration = json.load(f)
    set_config(configuration)

#TODO: Create parameters file to use login/password or login/ssh key's path. Make key priority if both are present
#TODO: IP should be accepted as CLI argument
#TODO: if IP is missing same code should be performed locally, if present - remotely.

if __name__ == "__main__":
    load_config()
    config.validate_config()

    parser = argparse.ArgumentParser(
        description="Deploys and prepares MTA CLI either locally or remotely.")
    parser.add_argument('--mta_version', required=True, help="The MTA version to use.")
    parser.add_argument('--build', required=True, help="Build number to use")
    parser.add_argument('--image_output_file', required=False,
                        help='Optional, the file containing related_images for bundle, generated by using get-image-build-details.py')
    parser.add_argument('--dependency_file', required=False,
                        help='Optional, the file containing dependencies to be unpacked in `~/.kantra`')
    parser.add_argument('--ip_address', required=False,
                        help='Optional, IP address of target server where MTA CLI will be deployed')
    args = parser.parse_args()

    if not args.ip_address:
        run_local_deployment({"version": args.mta_version,
                          "build": args.build,
                          "args_image_output_file": args.image_output_file,
                          "args_dependency_file": args.dependency_file
                          })
    else:
        run_remote_deployment({"version": args.mta_version,
                               "build": args.build,
                               "args_image_output_file": args.image_output_file,
                               "args_dependency_file": args.dependency_file,
                               "args_ip_address": args.ip_address
                          })
        # print("Deployment on remote server is not supported yet")

